{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d62c97e",
   "metadata": {},
   "source": [
    "# Results of fault diagnosis using TCN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c12297e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ice.fault_diagnosis.datasets import FaultDiagnosisRiethTEP\n",
    "from ice.fault_diagnosis.models import TCN\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9cb6459",
   "metadata": {},
   "source": [
    "Download the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6a71a39f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec7af5252301494c85187fe4084fe3da",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading data/rieth_tep/df.csv:   0%|          | 0/15330000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4046be2c40d94339a68d4b17003dcc68",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading data/rieth_tep/target.csv:   0%|          | 0/15330000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7c68ffa1b402446ebf41665797a05e05",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading data/rieth_tep/train_mask.csv:   0%|          | 0/15330000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset = FaultDiagnosisRiethTEP()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88388f56",
   "metadata": {},
   "source": [
    "Normalize the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9295a11a",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "dataset.df[dataset.train_mask] = scaler.fit_transform(dataset.df[dataset.train_mask])\n",
    "dataset.df[dataset.test_mask] = scaler.transform(dataset.df[dataset.test_mask])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd2fbd9a",
   "metadata": {},
   "source": [
    "Create the TCN model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "297fb60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = TCN(\n",
    "    window_size=60,\n",
    "    batch_size=128,\n",
    "    num_layers=1,\n",
    "    kernel_size=3,\n",
    "    hidden_dim=32,\n",
    "    lr=1e-4,\n",
    "    num_epochs=30,\n",
    "    verbose=True,\n",
    "    device='cpu',\n",
    "    save_checkpoints=True,\n",
    "    val_ratio=0.1,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "468592df",
   "metadata": {},
   "source": [
    "Load the checkpoint."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8beffc86",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.load_checkpoint('tcn_fault_diagnosis_epoch_30.tar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4719e4a",
   "metadata": {},
   "source": [
    "Evaluate the model on the test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd9ad1af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "164dd9d5bcfc4e8fa1663f328291083c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Creating sequence of samples:   0%|          | 0/10500 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Steps ...:   0%|          | 0/73829 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metrics = model.evaluate(\n",
    "    dataset.df[dataset.test_mask],\n",
    "    dataset.target[dataset.test_mask]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f08af96f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fault</th>\n",
       "      <th>TPR</th>\n",
       "      <th>FPR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.9675</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.9738</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.9643</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.9584</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.9731</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0.9679</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0.9691</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9</td>\n",
       "      <td>0.9651</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10</td>\n",
       "      <td>0.9788</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>11</td>\n",
       "      <td>0.9526</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>12</td>\n",
       "      <td>0.9418</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>13</td>\n",
       "      <td>0.9780</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>15</td>\n",
       "      <td>0.9752</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>16</td>\n",
       "      <td>0.9608</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>17</td>\n",
       "      <td>0.9357</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>18</td>\n",
       "      <td>0.9717</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19</td>\n",
       "      <td>0.9482</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Fault     TPR     FPR\n",
       "0       0  0.9675  0.0000\n",
       "1       1  0.9738  0.0000\n",
       "2       3  0.9643  0.0000\n",
       "3       4  0.9584  0.0000\n",
       "4       5  0.9731  0.0000\n",
       "5       6  0.9679  0.0000\n",
       "6       7  0.9691  0.0000\n",
       "7       9  0.9651  0.0000\n",
       "8      10  0.9788  0.0000\n",
       "9      11  0.9526  0.0000\n",
       "10     12  0.9418  0.0001\n",
       "11     13  0.9780  0.0000\n",
       "12     15  0.9752  0.0000\n",
       "13     16  0.9608  0.0000\n",
       "14     17  0.9357  0.0000\n",
       "15     18  0.9717  0.0000\n",
       "16     19  0.9482  0.0000"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx = np.array([1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20]) - 1\n",
    "pd.DataFrame({\n",
    "    'Fault': idx,\n",
    "    'TPR': np.array(metrics['true_positive_rate'])[idx],\n",
    "    'FPR': np.array(metrics['false_positive_rate'])[idx],\n",
    "}).round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2ad2b5f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average TPR: 0.96\n"
     ]
    }
   ],
   "source": [
    "print(f'Average TPR: {np.array(metrics[\"true_positive_rate\"])[idx].mean():.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c3a334ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.75\n",
      "97.38\n",
      "96.43\n",
      "95.84\n",
      "97.31\n",
      "96.79\n",
      "96.91\n",
      "96.51\n",
      "97.88\n",
      "95.26\n",
      "94.18\n",
      "97.80\n",
      "97.52\n",
      "96.08\n",
      "93.57\n",
      "97.17\n",
      "94.82\n"
     ]
    }
   ],
   "source": [
    "for i in np.array(metrics[\"true_positive_rate\"])[idx]*100:\n",
    "    print(f'{i:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "878cf22c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
