{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f2da72a3-830f-4a34-b767-230ed0dbf154",
   "metadata": {},
   "source": [
    "# Results of RUL estimation using lstm-256"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3de787a-3db3-47c0-a1c6-a2b36cc6586f",
   "metadata": {},
   "source": [
    "This notebook presents experimental results of anomaly detection on the Tennessee Eastman Process dataset using the model AutoEncoderMLP-256.\n",
    "\n",
    "Importing libraries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d2bf80e-d11f-4c3d-ac75-e4f0cfd418f6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\conda\\envs\\Latent\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "from ice.remaining_useful_life_estimation.datasets import RulCmapss\n",
    "from ice.remaining_useful_life_estimation.models import LSTM\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "from tqdm.auto import trange\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41bd9f60-51bf-4bb8-adc8-33a6abf923a1",
   "metadata": {},
   "source": [
    "Initializing model class and train/test data split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "814ba92e-e394-49a4-ac06-7b68361cf078",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_class = RulCmapss()\n",
    "\n",
    "data, target = dataset_class.df[0], dataset_class.target[0]\n",
    "test_data, test_target = dataset_class.test[0], dataset_class.test_target[0]  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "767c37e2-1750-46d5-9cd7-f628e7322305",
   "metadata": {},
   "source": [
    "Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f9bd5cb4-3cbd-48f2-bb70-8154f2a8e051",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/5 [00:00<?, ?it/s]\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 25000.32it/s]\n",
      "\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33333.10it/s]\n",
      " 20%|██        | 1/5 [00:47<03:09, 47.29s/it]\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33341.05it/s]\n",
      "\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33341.05it/s]\n",
      " 40%|████      | 2/5 [01:33<02:19, 46.56s/it]\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 24998.83it/s]\n",
      "\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 49985.75it/s]\n",
      " 60%|██████    | 3/5 [02:19<01:32, 46.38s/it]\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 11192.27it/s]\n",
      "\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33333.10it/s]\n",
      " 80%|████████  | 4/5 [03:06<00:46, 46.70s/it]\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33322.51it/s]\n",
      "\n",
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 33335.75it/s]\n",
      "100%|██████████| 5/5 [03:54<00:00, 46.88s/it]\n"
     ]
    }
   ],
   "source": [
    "metrics = []\n",
    "for i in trange(5): # 5\n",
    "    torch.random.manual_seed(i)\n",
    "    model_class = LSTM(\n",
    "        window_size=32,\n",
    "        batch_size= 64,\n",
    "        lr=1e-4,\n",
    "        num_epochs=35,\n",
    "        verbose=False,\n",
    "        device='cuda'\n",
    "    )\n",
    "    model_class.fit(data, target)\n",
    "    metrics.append(model_class.evaluate(test_data, test_target))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e07fdd0-6e8e-4dfa-bdab-c5d5fc82c5a7",
   "metadata": {},
   "source": [
    "Printing metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1f7bfec5-ce83-4d6a-883e-919f28dfa734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 14.456039 ± 0.461288\n",
      "score: 54669.804238 ± 15056.124157\n"
     ]
    }
   ],
   "source": [
    "rmse = []\n",
    "score = []\n",
    "for metrics_i in metrics:\n",
    "    rmse.append(metrics_i[\"rmse\"])\n",
    "    score.append(metrics_i[\"score\"])\n",
    "rmse_mean, rmse_std = np.mean(rmse, axis=0), np.std(rmse, axis=0)\n",
    "score_mean, score_std = np.mean(score, axis=0), np.std(score, axis=0)\n",
    "\n",
    "print(f'rmse: {np.mean(rmse):.6f} ± {2*np.std(rmse):.6f}')\n",
    "print(f'score: {np.mean(score):.6f} ± {2*np.std(score):.6f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06ef3651-5d0d-4e32-8eed-f16e88c05608",
   "metadata": {},
   "source": [
    "Parameter esimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb4521bd-4d21-4d1e-9f38-60ed4169445b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(944129, (0.8843235832452774, 0.06986449102077215))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_class.model_param_estimation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1804cd0-f8fc-4f6e-8fba-e74da43dec6c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
