{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f2da72a3-830f-4a34-b767-230ed0dbf154",
   "metadata": {},
   "source": [
    "# Results of RUL estimation using SOTA models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3de787a-3db3-47c0-a1c6-a2b36cc6586f",
   "metadata": {},
   "source": [
    "This notebook presents experimental results of rul estimation on the CMAPSS dataset using the model lstm-256.\n",
    "\n",
    "Importing libraries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d2bf80e-d11f-4c3d-ac75-e4f0cfd418f6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\conda\\envs\\ice_testing\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "from ice.remaining_useful_life_estimation.datasets import RulCmapss\n",
    "from ice.remaining_useful_life_estimation.models import IR \n",
    "\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41bd9f60-51bf-4bb8-adc8-33a6abf923a1",
   "metadata": {},
   "source": [
    "Initializing model class and train/test data split for fd001 subdataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "814ba92e-e394-49a4-ac06-7b68361cf078",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading data/C-MAPSS/fd1_train.csv: 100%|██████████| 20631/20631 [00:00<00:00, 504872.87it/s]\n",
      "Reading data/C-MAPSS/fd2_train.csv: 100%|██████████| 53759/53759 [00:00<00:00, 533656.45it/s]\n",
      "Reading data/C-MAPSS/fd3_train.csv: 100%|██████████| 24720/24720 [00:00<00:00, 496051.49it/s]\n",
      "Reading data/C-MAPSS/fd4_train.csv: 100%|██████████| 61249/61249 [00:00<00:00, 532245.75it/s]\n",
      "Reading data/C-MAPSS/fd1_train.csv: 100%|██████████| 20631/20631 [00:00<00:00, 547602.44it/s]\n",
      "Reading data/C-MAPSS/fd2_train.csv: 100%|██████████| 53759/53759 [00:00<00:00, 528810.42it/s]\n",
      "Reading data/C-MAPSS/fd3_train.csv: 100%|██████████| 24720/24720 [00:00<00:00, 496134.57it/s]\n",
      "Reading data/C-MAPSS/fd4_train.csv: 100%|██████████| 61249/61249 [00:00<00:00, 529770.68it/s]\n",
      "Reading data/C-MAPSS/fd1_test.csv: 100%|██████████| 13097/13097 [00:00<00:00, 486699.50it/s]\n",
      "Reading data/C-MAPSS/fd2_test.csv: 100%|██████████| 33991/33991 [00:00<00:00, 501537.62it/s]\n",
      "Reading data/C-MAPSS/fd3_test.csv: 100%|██████████| 16598/16598 [00:00<00:00, 512334.66it/s]\n",
      "Reading data/C-MAPSS/fd4_test.csv: 100%|██████████| 41214/41214 [00:00<00:00, 523435.48it/s]\n",
      "Reading data/C-MAPSS/fd1_test.csv: 100%|██████████| 13097/13097 [00:00<00:00, 474171.77it/s]\n",
      "Reading data/C-MAPSS/fd2_test.csv: 100%|██████████| 33991/33991 [00:00<00:00, 501537.62it/s]\n",
      "Reading data/C-MAPSS/fd3_test.csv: 100%|██████████| 16598/16598 [00:00<00:00, 520419.66it/s]\n",
      "Reading data/C-MAPSS/fd4_test.csv: 100%|██████████| 41214/41214 [00:00<00:00, 519167.37it/s]\n"
     ]
    }
   ],
   "source": [
    "dataset_class = RulCmapss()\n",
    "\n",
    "data, target = dataset_class.df[0], dataset_class.target[0]\n",
    "test_data, test_target = dataset_class.test[0], dataset_class.test_target[0]  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "717c0b98-a3cb-4cef-bf11-b9274617eddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "import pandas as pd \n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "trainer_data = scaler.fit_transform(data)\n",
    "tester_data = scaler.transform(test_data)\n",
    "\n",
    "trainer_data = pd.DataFrame(trainer_data, index=data.index, columns=data.columns)\n",
    "tester_data = pd.DataFrame(tester_data, index=test_data.index, columns=test_data.columns)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "767c37e2-1750-46d5-9cd7-f628e7322305",
   "metadata": {},
   "source": [
    "Training and testing with difference random seed for uncertainty estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f9bd5cb4-3cbd-48f2-bb70-8154f2a8e051",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\conda\\envs\\ice_testing\\Lib\\site-packages\\torch\\nn\\modules\\transformer.py:306: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.activation_relu_or_gelu was not True\n",
      "  warnings.warn(f\"enable_nested_tensor is True, but self.use_nested_tensor is False because {why_not_sparsity_fast_path}\")\n"
     ]
    }
   ],
   "source": [
    "model_class = IR()\n",
    "model_class.load_checkpoint(\"rul_sota.tar\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "15689271-81f5-4197-934a-7ac71c32f057",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating sequence of samples: 100%|██████████| 100/100 [00:00<00:00, 11148.24it/s]\n",
      "                                                          \r"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'rmse': 11.99217470692219, 'cmapss_score': 25394.12755711561}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_class.evaluate(tester_data, test_target)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
